// Code generated by MockGen. DO NOT EDIT.
// Source: keeper-project/internal/store (interfaces: Secret)

// Package mock_store is a generated GoMock package.
package mocks

import (
	context "context"
	types "keeper-project/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCredsSecret is a mock of Secret interface.
type MockCredsSecret[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockSecretCredsMockRecorder
}

// MockSecretCredsMockRecorderC is the mock recorder for MockSecret.
type MockSecretCredsMockRecorder struct {
	mock *MockCredsSecret[types.Credentials]
}

// NewMockCredsSecret creates a new mock instance.
func NewMockCredsSecret(ctrl *gomock.Controller) *MockCredsSecret[types.Credentials] {
	mock := &MockCredsSecret[types.Credentials]{ctrl: ctrl}
	mock.recorder = &MockSecretCredsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredsSecret[T]) EXPECT() *MockSecretCredsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCredsSecret[T]) Create(arg0 context.Context, arg1, arg2 string, arg3 *types.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSecretCredsMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCredsSecret[types.Credentials])(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockCredsSecret[T]) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretCredsMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCredsSecret[types.Credentials])(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockCredsSecret[T]) Get(arg0 context.Context, arg1, arg2 string) (*types.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretCredsMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCredsSecret[types.Credentials])(nil).Get), arg0, arg1, arg2)
}

// GetKeysList mocks base method.
func (m *MockCredsSecret[T]) GetKeysList(arg0 context.Context, arg1 string) ([]types.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeysList", arg0, arg1)
	ret0, _ := ret[0].([]types.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeysList indicates an expected call of GetKeysList.
func (mr *MockSecretCredsMockRecorder) GetKeysList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeysList", reflect.TypeOf((*MockCredsSecret[types.Credentials])(nil).GetKeysList), arg0, arg1)
}

// Update mocks base method.
func (m *MockCredsSecret[T]) Update(arg0 context.Context, arg1, arg2 string, arg3 *types.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSecretCredsMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCredsSecret[types.Credentials])(nil).Update), arg0, arg1, arg2, arg3)
}
